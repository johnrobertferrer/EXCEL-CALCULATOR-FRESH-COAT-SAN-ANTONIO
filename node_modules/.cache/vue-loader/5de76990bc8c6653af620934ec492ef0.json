{"remainingRequest":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\src\\components\\CustomInput.vue?vue&type=style&index=0&id=051ef74e&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\src\\components\\CustomInput.vue","mtime":1581136310161},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm5vQm94U2hhZG93IHsKICAgIGJvcmRlci1jb2xvcjogaW5oZXJpdCAhaW1wb3J0YW50OwogICAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7CiAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7Cn0KCi5iZy1ncmF5LTMwMCB7CiAgICBiYWNrZ3JvdW5kOiAjZTllY2VmICFpbXBvcnRhbnQ7Cn0KCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc1MHB4KSB7CiAgICAucmVzcG9uc2l2ZS1pbnB1dCB7CiAgICAgICAgZm9udC1zaXplOiA3NSU7CiAgICB9Cn0K"},{"version":3,"sources":["CustomInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CustomInput.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <b-form-input type=\"text\" v-model=\"displayValue\" @blur=\"isInputActive = false\" @focus=\"isInputActive = true\" :disabled=\"disabled\" :class=\"customClass\" v-on:keyup.enter=\"focus($event)\"/>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'CustomInput',\r\n\r\n    props: [\"value\", \"disabled\", \"alias\", \"type\", \"classes\", \"precision\"],\r\n\r\n    data() {\r\n        return {\r\n            isInputActive: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        focus(event) {\r\n            let interval = 0;\r\n\r\n            switch(this.alias) {\r\n                case 'average_hourly_rate': \r\n                case 'rounded_labor_days': \r\n                case 'rounded_not_end_zero': \r\n                case 'billable_hours_epic': \r\n                case 'average_hourly_cost_epic': \r\n                case 'number_gallons_my_estimate': \r\n                case 'price_p_gallon_my_estimate': \r\n                    interval = 1;\r\n                    break;\r\n                case 'burden_percent': \r\n                case 'labor_target_percent': \r\n                case 'billable_hours_actual': \r\n                case 'number_gallons_epic': \r\n                case 'revenue_actual': \r\n                    interval = 2;\r\n                    break;\r\n                case 'epic_work_order_hours': \r\n                    interval = 3;\r\n                    break;\r\n                case 'billable_hours_day': \r\n                case 'labor_burden_target_percent': \r\n                    interval = 4;\r\n                    break;\r\n                case 'average_hourly_cost_actual': \r\n                    interval = 5;\r\n                    break;\r\n                case 'price_p_gallon_epic': \r\n                    interval = 6;\r\n                    break;\r\n            }\r\n\r\n            let prependKey = '__BVID__';\r\n            let splittedId = event.target.id.split(prependKey);\r\n            let id = prependKey + (parseInt(splittedId[1]) + (interval * 2));\r\n\r\n            if(interval !== 0 && id) {\r\n                document.getElementById(id).focus();\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        displayValue: {\r\n            get: function() {\r\n                // Note: we cannot set this.value as it is a \"prop\". It needs to be passed to parent component\r\n                let value = this.value;\r\n\r\n                if (this.isInputActive) {\r\n                    // Cursor is inside the input field. unformat display value for user\r\n                    return value.toString();\r\n                } else {\r\n                    if(!isFinite(value)) {\r\n                        switch(this.type) {\r\n                            case 'dollar':\r\n                                format = \"$ -\";\r\n                                break;\r\n                            case 'percent': \r\n                                format = '0%';\r\n                                break;\r\n                            default:\r\n                                value = '0';\r\n                            break; \r\n                        }\r\n\r\n                        return format;\r\n                    } \r\n\r\n                    let precision = this.precision === undefined ? 2 : this.precision;\r\n                    let format = value.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\");\r\n\r\n                    switch(this.type) {\r\n                        case 'dollar':\r\n                            if (format < 0) {\r\n                                format = \"$ (\" + (value*-1).toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\") + \") \";\r\n                            } else if (format == 0) {\r\n                                format = \"$    -\";\r\n                            } else {\r\n                                format = \"$ \" + value.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\");\r\n                            }\r\n                            break;\r\n                        case 'percent': \r\n                            format = value.toFixed(precision) + '%';\r\n                            break;\r\n                        // case 'dollar_parenthesis':\r\n                            // format = value < 0\r\n                            //             ? \"- $ (\" + (value*-1).toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\") + ')'\r\n                            //             : \"$ (\" + value.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\") + ')';\r\n                            // format = \"$ (\" + value.toFixed(precision).replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\") + ')';\r\n                            // break;\r\n                    }\r\n                    // User is not modifying now. Format display value for user interface\r\n                    return format;\r\n                }\r\n            },\r\n            set: function(modifiedValue) {\r\n                // Recalculate value after ignoring \"$\" and \",\" in user input\r\n                let newValue = parseFloat(modifiedValue.replace(/[^\\d\\.]/g, \"\")) // eslint-disable-line\r\n                // Ensure that it is not NaN\r\n                if (isNaN(newValue)) {\r\n                    newValue = 0\r\n                }\r\n                // Note: we cannot set this.value as it is a \"prop\". It needs to be passed to parent component\r\n                // $emit the event so that parent component gets it\r\n                this.$emit('input', newValue);\r\n            }\r\n        },\r\n\r\n        customClass: function() {\r\n            let custom = this.classes === undefined ? '' : this.classes;\r\n\r\n            return custom;\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n    .noBoxShadow {\r\n        border-color: inherit !important;\r\n        -webkit-box-shadow: none !important;\r\n        box-shadow: none !important;\r\n    }\r\n\r\n    .bg-gray-300 {\r\n        background: #e9ecef !important;\r\n    }\r\n\r\n    @media screen and (max-width: 750px) {\r\n        .responsive-input {\r\n            font-size: 75%;\r\n        }\r\n    }\r\n</style>"]}]}