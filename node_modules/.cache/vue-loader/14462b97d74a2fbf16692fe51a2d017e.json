{"remainingRequest":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\src\\components\\MainComponent.vue?vue&type=template&id=22f94d78&scoped=true&","dependencies":[{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\src\\components\\MainComponent.vue","mtime":1580352261405},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JR Ferrer\\Documents\\EXCEL-CALCULATOR-FRESH-COAT-SAN-ANTONIO\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}